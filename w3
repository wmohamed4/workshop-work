#include <iostream>
#include "cstr.h"
#include "CC.h"

using namespace std;

namespace seneca {

   void CC::display(const char* name, unsigned long long number, short expYear, short expMon, short cvv) const {
      char lname[31]{};
      strcpy(lname, name, 30); // Use the cstr module's strncpy equivalent
      cout << "| ";
      cout.width(30);
      cout.fill(' ');
      cout.setf(ios::left);
      cout << lname << " | ";
      prnNumber(number);
      cout << " | " << cvv << " | ";
      cout.unsetf(ios::left);
      cout.setf(ios::right);
      cout.width(2);
      cout << expMon << "/" << expYear << " |" << endl;
      cout.unsetf(ios::right);
   }

   bool CC::validate(const char* name, unsigned long long cardNo, short cvv, short expMon, short expYear) const {
      return name && seneca::strlen(name) > 2 &&
             cardNo >= 4000000000000000ull && cardNo <= 4099999999999999ull &&
             cvv >= 100 && cvv <= 999 &&
             expMon >= 1 && expMon <= 12 &&
             expYear >= 24 && expYear <= 32;
   }

   void CC::prnNumber(unsigned long long CCnum) const {
      cout << CCnum / 1000000000000000ULL << " ";
      CCnum %= 1000000000000000ULL;
      cout << CCnum / 1000000000000ULL << " ";
      CCnum %= 1000000000000ULL;
      cout << CCnum / 100000000ULL << " ";
      CCnum %= 100000000ULL;
      cout << CCnum / 10000ULL << " ";
      cout << CCnum % 10000ULL;
   }

   CC::CC() {
      set();
   }

   CC::~CC() {
      cleanUp();
   }

   void CC::set() {
      name = nullptr;
      cardNo = 0;
      cvv = 0;
      expMon = 0;
      expYear = 0;
   }

   void CC::cleanUp() {
      freeMem(name); // Deallocate memory for name
      set();         // Set object to a safe empty state
   }

   bool CC::isEmpty() const {
      return name == nullptr;
   }

   void CC::set(const char* cc_name, unsigned long long cc_no, short m_cvv, short m_expMon, short m_expYear) {
      cleanUp(); // Clean up any existing memory
      if (validate(cc_name, cc_no, m_cvv, m_expMon, m_expYear)) {
         alocpy(name, cc_name); // Allocate and copy the cardholder's name
         cardNo = cc_no;
         cvv = m_cvv;
         expMon = m_expMon;
         expYear = m_expYear;
      }
   }

   void CC::display() const {
      if (isEmpty()) {
         cout << "Invalid Credit Card Record" << endl;
      } else {
         display(name, cardNo, expYear, expMon, cvv);
      }
   }
}
